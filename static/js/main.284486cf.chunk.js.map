{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["Card","props","style","showing","backgroundColor","pointerEvents","onClick","click","className","CardGrid","cards","map","card","cardState","handleClick","id","Newgame","startNewGame","App","shuffle","arr","sort","Math","random","state","setState","showingCards","secondClick","showingCardsIds","filter","card1color","card2color","matchedCards","includes","notMatchedCards","setTimeout","CardState","this","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.284486cf.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport \"./App.css\";\nimport \"./CardGrid.css\";\nimport \"./Card.css\";\n\nconst Card = props => {\n  let style = {};\n  if (props.showing)\n    style = { backgroundColor: props.backgroundColor, pointerEvents: \"none\" };\n  return <div onClick={props.click} style={style} className=\"card\" />;\n};\n\nconst CardGrid = props => {\n  const cards = props.cards.map(card => (\n    <Card\n      key={card.id}\n      backgroundColor={card.backgroundColor}\n      showing={card.cardState}\n      click={() => props.handleClick(card.id)}\n    />\n  ));\n  return <div className=\"cards-block\">{cards}</div>;\n};\n\nconst Newgame = props => {\n  return (\n    <button onClick={props.startNewGame} className=\"newGame\">\n      Start New Game\n    </button>\n  );\n};\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    const CardState = {\n      HIDING: 0,\n      SHOWING: 1,\n      MATCHING: 2\n    };\n    let cards = [\n      { id: 0, cardState: CardState.HIDING, backgroundColor: \"red\" },\n      { id: 1, cardState: CardState.HIDING, backgroundColor: \"red\" },\n      { id: 2, cardState: CardState.HIDING, backgroundColor: \"navy\" },\n      { id: 3, cardState: CardState.HIDING, backgroundColor: \"navy\" },\n      { id: 4, cardState: CardState.HIDING, backgroundColor: \"green\" },\n      { id: 5, cardState: CardState.HIDING, backgroundColor: \"green\" },\n      { id: 6, cardState: CardState.HIDING, backgroundColor: \"yellow\" },\n      { id: 7, cardState: CardState.HIDING, backgroundColor: \"yellow\" },\n      { id: 8, cardState: CardState.HIDING, backgroundColor: \"black\" },\n      { id: 9, cardState: CardState.HIDING, backgroundColor: \"black\" },\n      { id: 10, cardState: CardState.HIDING, backgroundColor: \"purple\" },\n      { id: 11, cardState: CardState.HIDING, backgroundColor: \"purple\" },\n      { id: 12, cardState: CardState.HIDING, backgroundColor: \"pink\" },\n      { id: 13, cardState: CardState.HIDING, backgroundColor: \"pink\" },\n      { id: 14, cardState: CardState.HIDING, backgroundColor: \"lightskyblue\" },\n      { id: 15, cardState: CardState.HIDING, backgroundColor: \"lightskyblue\" }\n    ];\n    cards = this.shuffle(cards);\n    this.state = { cards, secondClick: false };\n  }\n\n  shuffle = arr => arr.sort(() => 0.5 - Math.random());\n  startNewGame = () => {\n    const cards = [...this.state.cards];\n    cards.map(card => {\n      return { ...card, cardState: 0 };\n    });\n    this.setState({ cards });\n  };\n  handleClick = id => {\n    const showingCards = this.state.cards.map(card => {\n      if (card.id === id) {\n        return { ...card, cardState: 1 };\n      }\n      return card;\n    });\n    const { secondClick } = this.state;\n\n    const showingCardsIds = showingCards\n      .filter(card => card.cardState === 1)\n      .map(card => card.id);\n\n    const card1 = showingCards.filter(card => card.id === showingCardsIds[0]);\n    const card1color = card1[0].backgroundColor;\n\n    if (secondClick) {\n      const card2 = showingCards.filter(card => card.id === showingCardsIds[1]);\n      const card2color = card2[0].backgroundColor;\n      if (card1color === card2color) {\n        const matchedCards = showingCards.map(card =>\n          showingCardsIds.includes(card.id) ? { ...card, cardState: 2 } : card\n        );\n        this.setState({ cards: matchedCards, secondClick: false });\n        return;\n      } else if (card1color !== card2color) {\n        const notMatchedCards = showingCards.map(card =>\n          showingCardsIds.includes(card.id) ? { ...card, cardState: 0 } : card\n        );\n        this.setState({ cards: showingCards }, () =>\n          setTimeout(\n            () => this.setState({ cards: notMatchedCards, secondClick: false }),\n            300\n          )\n        );\n        return;\n      }\n    }\n    this.setState({ cards: showingCards, secondClick: true });\n  };\n\n  render() {\n    return (\n      <div className=\"App\">\n        <Newgame startNewGame={this.startNewGame} />\n        <CardGrid handleClick={this.handleClick} cards={this.state.cards} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}